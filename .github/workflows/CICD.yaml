name: CICD PIPELINE
# CICD PIPELINE : LINT, REVIEW , Build, Push Docker Image, and Deploy to Azure
on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: ${{ secrets.AZURE_WEBAPP_NAME }}
  AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
  DOCKER_IMAGE: ${{ secrets.DOCKER_REPO }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install nbqa black flake8 isort sqlfluff 

      - name: Run linters
        run: |
          black src/ tests/
          isort src/ tests/
          flake8 src/ tests/
          nbqa black src/ tests/
          nbqa flake8 src/ tests/
          nbqa isort src/ tests/
          sqlfluff lint src/ tests/
      
    
  sonarcloud:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry poetry-plugin-export
          poetry export --without-hashes -f requirements.txt -o requirements.txt
          pip install -r requirements.txt

      - name: Run Bandit
        run: |
          bandit -r src/ -f json -o bandit.json

      - name: Run tests with coverage
        run: |
          pytest --cov=src --cov-report=xml --cov-report=term

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
          SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}

        
  # ai-review:
  #   runs-on: ubuntu-latest
  #   needs: lint
  #   steps:
  #     - name: Checkout repo
  #       uses: actions/checkout@v3

  #     - name: Ensure ai-review.yaml exists
  #       run: |
  #         if [ ! -f ai-review.yaml ]; then
  #           cat <<EOF > ai-review.yaml
  #         ${{ secrets.AI_REVIEW_YAML }}
  #         EOF
  #         echo "Injected ai-review.yaml from secret."
  #         else
  #           echo "ai-review.yaml already exists. Skipping injection."
  #         fi

  #     - name: Debug container contents
  #       run: |
  #         ls -la 

  #     - name: cat ai-review file
  #       run: |
  #         cat ai-review.yaml

  #     - name: Run AI Code Review Agent
  #       uses: Manav-Khandurie/agents/code-review-agent@code-review-agent-v1.0.4 # Stable tested 1.0.3
  #       with:
  #         config-path: "ai-review.yaml"
  #         score-threshold: 85
  #       env:
  #         DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
  
  # build-secure-push:
  #   runs-on: ubuntu-latest
  #   needs: ai-review
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Log in to DockerHub
  #       run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ env.DOCKER_USERNAME }}" --password-stdin

  #     - name: Extract version
  #       id: version
  #       run: |
  #         VERSION=${GITHUB_REF#refs/*/}
  #         SHORT_SHA=$(git rev-parse --short HEAD)
  #         if [[ "$VERSION" == "main" ]]; then
  #           VERSION="dev-${SHORT_SHA}"
  #         fi
  #         echo "version=$VERSION" >> $GITHUB_OUTPUT

  #     - name: Build Docker image
  #       run: docker build -t ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ steps.version.outputs.version }} .

  #     - name: Docker image tag latest
  #       run: |
  #         docker tag ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ steps.version.outputs.version }} ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:latest

  #     - name: Run Trivy vulnerability scanner
  #       uses: aquasecurity/trivy-action@0.28.0
  #       with:
  #         image-ref: '${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ steps.version.outputs.version }}'
  #         format: 'sarif'
  #         output: 'trivy-results.sarif'
  #       env:
  #         TRIVY_IMAGE: 'docker://${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ steps.version.outputs.version }}'

  #     - name: Upload Trivy scan results to GitHub Security tab
  #       uses: github/codeql-action/upload-sarif@v3
  #       with:
  #         sarif_file: 'trivy-results.sarif'
          
  #     - name: Push Docker image to DockerHub
  #       run: |
  #         docker push ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ steps.version.outputs.version }}
  #         docker push ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:latest

  # deploy-to-azure:
  #   runs-on: ubuntu-latest
  #   needs: build-secure-push  

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Log in to Azure
  #       uses: azure/login@v2
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS }}

  #     - name: Check Azure CLI version
  #       run: az --version

  #     - name: Deploy Docker image from DockerHub to Azure Web App
  #       uses: azure/webapps-deploy@v2
  #       with:
  #         app-name: ${{ env.AZURE_WEBAPP_NAME }}
  #         images: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:latest

